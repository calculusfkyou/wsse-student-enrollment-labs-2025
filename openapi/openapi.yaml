openapi: "3.0.0"
info:
  title: "Hello API"
  version: "0.1.0"
servers:
  - url: "https://api.example.edu/api/v1"
    description: "Production"
paths:
  /health:
    get:
      summary: "Health check"
      description: "服務是否正常"
      security: []
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "OK" }
  /students:
    get:
      summary: "Get all students"
      description: "Retrieve a list of all students."
      responses:
        "200":
          description: "A list of students"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new student"
      description: "Add a new student to the system."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        "201":
          description: "Student created successfully"
          headers:
            Location:
              description: "URL of the newly created student"
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Student:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Invalid request parameters."
